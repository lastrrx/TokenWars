#!/usr/bin/env node

// =====================================================
// Solana Token Betting Platform - Automated Setup Script
// =====================================================

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Colors for console output
const colors = {
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
};

function log(message, color = 'white') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function main() {
    log('üöÄ Solana Token Betting Platform Setup', 'cyan');
    log('=====================================', 'cyan');
    log('');

    // Step 1: Check prerequisites
    log('üìã Checking prerequisites...', 'blue');
    
    try {
        execSync('node --version', { stdio: 'ignore' });
        log('‚úÖ Node.js is installed', 'green');
    } catch (error) {
        log('‚ùå Node.js is not installed. Please install Node.js 16+ first.', 'red');
        process.exit(1);
    }

    try {
        execSync('npm --version', { stdio: 'ignore' });
        log('‚úÖ npm is installed', 'green');
    } catch (error) {
        log('‚ùå npm is not installed.', 'red');
        process.exit(1);
    }

    // Step 2: Collect configuration
    log('');
    log('üîß Configuration Setup', 'blue');
    log('Please provide the following information:');
    log('');

    const config = {};

    // Wallet Address
    config.walletAddress = await question('Enter your Solana wallet address: ');
    if (!config.walletAddress || config.walletAddress.length < 32) {
        log('‚ùå Invalid wallet address provided.', 'red');
        process.exit(1);
    }

    // Admin PIN
    config.adminPin = await question('Enter admin PIN (leave empty for default "1234"): ') || '1234';

    // API Keys
    log('');
    log('üì° API Keys Setup', 'yellow');
    log('You can skip these for now and add them later to .env file');
    log('');

    config.heliusKey = await question('Helius API Key (optional): ');
    config.alchemyKey = await question('Alchemy API Key (optional): ');
    config.coingeckoKey = await question('CoinGecko API Key (optional): ');

    // Supabase Service Role Key
    log('');
    log('üîë Supabase Service Role Key', 'yellow');
    log('Go to your Supabase dashboard > Settings > API and copy the "service_role" key');
    config.supabaseServiceKey = await question('Supabase Service Role Key: ');

    // Network selection
    log('');
    config.network = await question('Select network (devnet/mainnet) [devnet]: ') || 'devnet';

    // Step 3: Create .env file
    log('');
    log('üìù Creating environment file...', 'blue');

    const envContent = `# =====================================================
# Solana Token Betting Platform - Environment Configuration
# Generated by setup script on ${new Date().toISOString()}
# =====================================================

# =====================================================
# SUPABASE CONFIGURATION
# =====================================================
SUPABASE_URL=https://lavbfujrqmxiyfkfgcqy.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxhdmJmdWpycW14aXlma2ZnY3F5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA3NjYwNjIsImV4cCI6MjA2NjM0MjA2Mn0.hlDZzchNyhcEX4KW5YNXwcaq3WYDWkc7IeSdflmAYbs
SUPABASE_SERVICE_ROLE_KEY=${config.supabaseServiceKey}

# =====================================================
# SOLANA CONFIGURATION
# =====================================================
SOLANA_NETWORK=${config.network}
SOLANA_RPC_URL=${config.network === 'mainnet' ? 'https://api.mainnet-beta.solana.com' : 'https://api.devnet.solana.com'}
PLATFORM_WALLET_ADDRESS=${config.walletAddress}
INITIAL_ADMIN_WALLET=${config.walletAddress}

# =====================================================
# PRICE API CONFIGURATION
# =====================================================
HELIUS_API_KEY=${config.heliusKey}
ALCHEMY_API_KEY=${config.alchemyKey}
COINGECKO_API_KEY=${config.coingeckoKey}
JUPITER_API_URL=https://price.jup.ag/v4

# =====================================================
# SERVER CONFIGURATION
# =====================================================
NODE_ENV=development
PORT=3000
JWT_SECRET=${generateRandomString(64)}
SESSION_SECRET=${generateRandomString(32)}
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# =====================================================
# ADMIN CONFIGURATION
# =====================================================
ADMIN_SESSION_DURATION_HOURS=24
ADMIN_MAX_LOGIN_ATTEMPTS=5

# =====================================================
# PLATFORM SETTINGS
# =====================================================
DEFAULT_BET_AMOUNT=0.1
PLATFORM_FEE_PERCENTAGE=15.0
COMPETITION_DURATION_HOURS=24
VOTING_DURATION_HOURS=1
MIN_MARKET_CAP=5000000
MAX_MARKET_CAP=100000000
MARKET_CAP_TOLERANCE=10.0
MIN_TOKEN_AGE_DAYS=30
MIN_DAILY_VOLUME=100000

# =====================================================
# FRONTEND CONFIGURATION
# =====================================================
FRONTEND_URL=http://localhost:3000
ADMIN_URL=http://localhost:3000/admin
CORS_ORIGIN=http://localhost:3000,http://localhost:3001

# =====================================================
# SECURITY SETTINGS
# =====================================================
HELMET_ENABLED=true
DB_POOL_MIN=2
DB_POOL_MAX=10

# =====================================================
# MONITORING AND LOGGING
# =====================================================
LOG_LEVEL=info
ENABLE_REQUEST_LOGGING=true
ENABLE_ERROR_TRACKING=true
ENABLE_DEBUG_MODE=true
ENABLE_MOCK_PRICES=false
ENABLE_TEST_COMPETITIONS=true

# =====================================================
# BACKUP AND RECOVERY
# =====================================================
ENABLE_AUTO_BACKUP=true
BACKUP_RETENTION_DAYS=30
ENABLE_DISASTER_RECOVERY=true
`;

    fs.writeFileSync('.env', envContent);
    log('‚úÖ Environment file created', 'green');

    // Step 4: Install dependencies
    log('');
    log('üì¶ Installing dependencies...', 'blue');
    
    try {
        execSync('npm install', { stdio: 'inherit' });
        log('‚úÖ Dependencies installed successfully', 'green');
    } catch (error) {
        log('‚ùå Failed to install dependencies', 'red');
        log('Please run "npm install" manually', 'yellow');
    }

    // Step 5: Create Supabase setup SQL with admin user
    log('');
    log('üóÑÔ∏è  Generating database setup SQL...', 'blue');

    const sqlTemplate = fs.readFileSync('database/supabase-setup.sql', 'utf8');
    const customizedSQL = sqlTemplate.replace(
        'YOUR_WALLET_ADDRESS_HERE',
        config.walletAddress
    ).replace(
        "'1234'",
        `'${config.adminPin}'`
    );

    fs.writeFileSync('database/supabase-setup-custom.sql', customizedSQL);
    log('‚úÖ Custom database setup SQL created', 'green');

    // Step 6: Test database connection
    log('');
    log('üîå Testing database connection...', 'blue');

    try {
        const { supabase } = require('../backend/database.js');
        const { data, error } = await supabase.from('users').select('count').limit(1);
        
        if (error) {
            log('‚ùå Database connection failed:', 'red');
            log(error.message, 'red');
        } else {
            log('‚úÖ Database connection successful', 'green');
        }
    } catch (error) {
        log('‚ö†Ô∏è  Database connection test skipped (tables may not exist yet)', 'yellow');
    }

    // Step 7: Display next steps
    log('');
    log('üéâ Setup Complete!', 'green');
    log('==================', 'green');
    log('');
    log('Next Steps:', 'cyan');
    log('1. Go to your Supabase dashboard (https://app.supabase.com)', 'white');
    log('2. Open the SQL Editor', 'white');
    log('3. Copy and run the contents of "database/supabase-setup-custom.sql"', 'white');
    log('4. Start your development server: npm run dev', 'white');
    log('5. Open http://localhost:3000 in your browser', 'white');
    log('');
    log('Admin Access:', 'yellow');
    log(`Wallet: ${config.walletAddress}`, 'white');
    log(`PIN: ${config.adminPin}`, 'white');
    log('');
    log('Important Security Notes:', 'red');
    log('- Change your admin PIN after first login', 'white');
    log('- Keep your .env file secure and never commit it to version control', 'white');
    log('- Add your API keys to .env when you get them', 'white');
    log('');

    const openBrowser = await question('Would you like to open Supabase dashboard now? (y/n): ');
    if (openBrowser.toLowerCase() === 'y' || openBrowser.toLowerCase() === 'yes') {
        try {
            const open = require('open');
            await open('https://app.supabase.com/project/lavbfujrqmxiyfkfgcqy');
        } catch (error) {
            log('Please manually open: https://app.supabase.com/project/lavbfujrqmxiyfkfgcqy', 'yellow');
        }
    }

    rl.close();
}

function generateRandomString(length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

// Handle errors
process.on('unhandledRejection', (error) => {
    log('‚ùå Setup failed:', 'red');
    log(error.message, 'red');
    process.exit(1);
});

process.on('SIGINT', () => {
    log('', 'white');
    log('Setup cancelled by user', 'yellow');
    rl.close();
    process.exit(0);
});

// Run the setup
main().catch((error) => {
    log('‚ùå Setup failed:', 'red');
    log(error.message, 'red');
    process.exit(1);
});

module.exports = { main };
